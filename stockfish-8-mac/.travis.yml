language: cpp
sudo: required
dist: trusty

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'g++-6-multilib', 'g++-multilib', 'valgrind']
      env:
        - COMPILER=g++-6
        - COMP=gcc

    - os: linux
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['clang', 'g++-multilib', 'valgrind']
      env:
        - COMPILER=clang++
        - COMP=clang

    - os: osx
      compiler: gcc
      env:
        - COMPILER=g++
        - COMP=gcc

    - os: osx
      compiler: clang
      env:
        - COMPILER=clang++ V='Apple LLVM 6.0' # Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM 3.5svn)
        - COMP=clang

branches:
  only:
   - master

before_script:
  - cd src

script:
  - make clean && make build ARCH=x86-64 && ./stockfish bench 2>&1 >/dev/null | grep 'Nodes searched' | tee bench1
  - make clean && make build ARCH=x86-32 && ./stockfish bench 2>&1 >/dev/null | grep 'Nodes searched' | tee bench2
  - echo "Checking for same bench numbers..."
  - diff bench1 bench2 > result
  - test ! -s result
  # if valgrind is available check the build is without error, reduce depth to speedup testing, but not too shallow to catch more cases.
  - if [ -x "$(command -v valgrind )" ] ; then make clean && make ARCH=x86-64 debug=yes build && valgrind --error-exitcode=42 ./stockfish bench 128 1 10 default depth 1>/dev/null ; fi
  # use g++-6 as a proxy for having sanitizers ... might need revision as they become available for more recent versions of clang/gcc than trusty provides
  - if [[ "$COMPILER" == "g++-6" ]]; then make clean && make ARCH=x86-64 sanitize=yes build && ! ./stockfish bench 2>&1 | grep "runtime error:" ; fi
